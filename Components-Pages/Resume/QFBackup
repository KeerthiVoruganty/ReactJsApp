import React, { useState, useEffect } from 'react';
import { Button, Modal } from 'react-bootstrap';
import { PORT } from "../../config";
import { useToggle } from '../../Hook';
import axios from 'axios';
import uuid from "uuid/v4";
import { Link } from "react-router-dom";
import './Resume.css';
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

function ModalForm(props) {
    const [user, setUser] = useState(); 
    const [isCreate, toggleCreate] = useToggle(props.isCreate);
    const [startDate, setStartDate] = useState(new Date());
    const [graduationDate, setGraduationDate] = useState(new Date());
    let [link, setLink] = useState("")
    let [fName, setFName] = useState("")
    let [file, setFile] = useState()

    const qualification = isCreate ? null : props.user.qualifications.filter(q => q._id === props.qualificationID)

    const handleClose = () => {
        props.showPopup(false)
    };
    const prepareValue = (id) => {
        const institution_name = document.querySelector("#institution").value
        const degree = document.querySelector("#degree").value
        const major = document.querySelector("#major").value
        const award_name = document.querySelector("#award_name").value
        const start_date = document.querySelector("#start_date").value
        const graduation_date = document.querySelector("#graduation_date").value
        const qualification_url = link
        const newQualification = {"institution_name": institution_name, "degree": degree, "major":major,
                                  "award_name": award_name, "start_date":start_date, "graduation_date":graduation_date, 
                                   "qualification_url": qualification_url, "_id": id};
        return newQualification
    };

    const preparePDValue = (id) => {
        const institution_name = document.querySelector("#institution").value
        const degree = document.querySelector("#degree").value
        const details = document.querySelector("#details").value
        const year = document.querySelector("#year").value
        const newQualification = {"institution_name": institution_name, "course_name": degree,
                                  "details": details, "year_awarded":year, "_id": id};
        return newQualification
    };

    const prepareExValue = (id) => {
        const institution_name = document.querySelector("#institution").value
        const course_name = document.querySelector("#course").value
        const class_level = document.querySelector("#class_level").value
        const start_date = document.querySelector("#start_date").value
        // const end_date = document.querySelector("#current_date").checked ? 'Present' : 
        // const newExperience = {"institution_name": institution_name, "course_name": degree,
        //                           "details": details, "year_awarded":year, "_id": id};
        // return newExperience
    }

    const handleSave = () => {
        
        const id = uuid()
        // ======= Prepare values =======
        const newQualification = prepareValue(id)

        // ======= Close popup =======
        props.showPopup(false)
        // ======= Update user  =======
        const newUser = Object.assign({}, props.user);

        newUser.qualifications = [...props.user.qualifications, newQualification]
        props.addQualification(newUser)
        // ======= Update localStorage =======
        window.localStorage.setItem('user', JSON.stringify(newUser))

        //Todo: save the qualification into database
        axios.put(`${PORT}/updateUser`,{
            user: newUser
          })
          .then( res => {
            console.log("successful")
          })
          .catch( err => {
            console.log(err)
          })
    }

    const handleEdit = () => {
        const newQualification = prepareValue(props.qualificationID)
        // ======= Close popup =======
        props.showPopup(false)
        // ======= Update user  =======
        const newUser = Object.assign({}, props.user);
        const index = newUser.qualifications.findIndex(q => q._id === props.qualificationID)
        newUser.qualifications[index] = newQualification
        props.addQualification(newUser)
        // ======= Update localStorage =======
        window.localStorage.setItem('user', JSON.stringify(newUser))

        //Todo: save the qualification into database
        axios.put(`${PORT}/updateUser`,{
            user: newUser
            })
            .then( res => {
            console.log("successful")
            })
            .catch( err => {
                console.log(err)
            })

    }

    const handleSavePD = () => {
        const id = uuid()
        // ======= Prepare values =======
        const newQualification = prepareValue(id)

        // ======= Close popup =======
        props.showPopup(false)
        // ======= Update user  =======
        const newUser = Object.assign({}, props.user);
        newUser.qualifications = [...props.user.qualifications, newQualification]
        props.addQualification(newUser)
        // ======= Update localStorage =======
        window.localStorage.setItem('user', JSON.stringify(newUser))

        //Todo: save the qualification into database
        axios.put(`${PORT}/updateUser`,{
            user: newUser
          })
          .then( res => {
            console.log("successful")
          })
          .catch( err => {
            console.log(err)
          })
    }  

    const handleEditPD = () => {

    }

    const handleSavePE = () => {
        const id = uuid()
        // ======= Prepare values =======
        const newExperience = prepareExValue(id)

        // ======= Close popup =======
        props.showPopup(false)
        // ======= Update user  =======
        const newUser = Object.assign({}, props.user);
        newUser.qualifications = [...props.user.qualifications, newExperience]
        props.addQualification(newUser)
        // ======= Update localStorage =======
        window.localStorage.setItem('user', JSON.stringify(newUser))

        //Todo: save the qualification into database
        axios.put(`${PORT}/updateUser`,{
            user: newUser
          })
          .then( res => {
            console.log("successful")
          })
          .catch( err => {
            console.log(err)
          })
    }
    const handleFile = (e) => {
        const file = e.target.files[0]
        setFile(file)
    }
    const handleSaveFile =() => {
        if(file){
            const [fileName, fileType] = file.name.split(".")
            axios.post(`${PORT}/s3`, {
                fileName: `qualification${fileName}`,
                fileType: fileType,
                _id: props.user._id
            })
            .then(res => {                
                const returnData = res.data.data.returnData;                
                const signedRequest = returnData.signedRequest;
                const url = returnData.url;                        
                const options = {
                    headers: {
                        "Content-Type": fileType
                    }                
                };
                axios.put(signedRequest, file, options)
                    .then(res2 => {                        
                        const fileNameOnly = url.split(props.user._id+'/qualification')
                        setLink(url)                        
                        setFName(fileNameOnly[1])                        
                    })
                    .catch(error1 => {
                        console.log(error1)
                    });
                })
                .catch(err => {
                    alert(JSON.stringify(err))
                });
        } else {
            console.log("Upload Error")
        }
    }
    const qualificationForm = () => {
        return(
            <Modal show={true} className="model-for-qualificationForm">
                <Modal.Header>
                    <Modal.Title>Qualification</Modal.Title>
                    <div onClick={handleClose} className='dot'></div>
                </Modal.Header>
                <Modal.Body>
                    <div className="model-main-content">
                        
                    <form onSubmit={handleSave}>
                        <div className="row">
                            <div className="col-6">

                                <label htmlFor="degree">Award Type:</label>
                                <select 
                                    className="form-control" 
                                    name="degree" 
                                    id="degree" 
                                    required
                                >
                                    <option value="Certificate">Certificate</option>
                                    <option value="Graduate Certificate">Graduate Certificate</option>
                                    <option value="Diploma">Diploma</option>
                                    <option value="Advanced Diploma">Advanced Diploma</option>
                                    <option value="Graduate Diploma">Graduate Diploma</option>
                                    <option value="Bachelor’s Degree">Bachelor’s Degree</option>
                                    <option value="Master’s Degree">Master’s Degree</option>
                                    <option value="PhD">PhD</option>
                                </select>
                                
                                <label htmlFor="major">Award Name:</label>
                                <input 
                                    type="text" 
                                    className="form-control" 
                                    name="award_name" 
                                    id="award_name" 
                                    required 
                                    defaultValue={qualification ? qualification[0].major: ""}
                                />

                                <label htmlFor="details">Major/s:</label>
                                <input 
                                    type="text" 
                                    placeholder="Separate major with comma" 
                                    className="form-control" 
                                    name="major" 
                                    id="major" 
                                    required 
                                    defaultValue={qualification ? qualification[0].details: ""}
                                />

                                <label htmlFor="institution">Institution Name:</label>
                                <input 
                                    type="text" 
                                    className="form-control" 
                                    name="institution" 
                                    id="institution" 
                                    required 
                                    defaultValue={qualification ? qualification[0].institution_name: ""} 
                                />
                                  
                            </div>
                            <div className="col-6">
                                <label htmlFor="start_date">Start Date</label>
                                <DatePicker
                                    className="form-control"
                                    name="start_date" 
                                    id="start_date"
                                    maxDate={startDate}
                                    selected={startDate}
                                    onChange={date => setStartDate(date)}
                                    showYearDropdown
                                    dateFormatCalendar="MMMM"
                                    yearDropdownItemNumber={10}
                                    scrollableYearDropdown
                                />

                                <label htmlFor="graduation_date">Graduation Date</label>
                                <DatePicker
                                    className="form-control"
                                    name="graduation_date" 
                                    id="graduation_date"
                                    selected={graduationDate}
                                    onChange={date => setGraduationDate(date)}
                                    showYearDropdown
                                    dateFormatCalendar="MMMM"
                                    yearDropdownItemNumber={10}
                                    scrollableYearDropdown
                                />

                                {/* document upload */}
                                <div className="form-group">
                                    <label htmlFor="upload_qualification" className="w-100 lineheight-17">
                                        <p className="float-left mb-0">Upload</p>
                                        <div className='span-hovered'>
                                            <i className="mdi mdi-checkbox-marked-circle float-right"></i>
                                            <span className="span-hovered-content">This document will to be verified!</span>
                                        </div>
                                    </label>
                                    <div className="input-icon d-flex justify-content-between">
                                        <i className="mdi mdi-upload"></i>
                                        <input 
                                            type="file" 
                                            placeholder="Upload a copy of your qualification" 
                                            className="form-control" 
                                            name="upload_qualification" 
                                            id="upload_qualification" 
                                            onChange = {handleFile}                                                                                        
                                        />
                                        <button
                                        type="button"
                                        onClick = {handleSaveFile}
                                        className="ml-3 pl-4 pr-4 mr-0 mb-2 btn btn-primary btn-c primary-button-no-margin-hover">
                                        Upload
                                        </button> 
                                    </div>
                                    <div className="text-left">
                                        <Link to={{ pathname: link }}
                                              target="_blank">
                                            <p className="uploaded-file-name">{fName}</p>
                                        </Link>
                                        {/* <i
                                            className="mdi mdi-file-remove"
                                        ></i> */}
                                    </div>
                                </div>
                                <p className="small">
                                    Please don't forget to upload a file we can verify. It will take us few days before this information is shown on your profile
                                </p>
                            </div>
                        </div>
                        <div className="row qualification-footer">
                            <div className="col-md-6">
                                <Link
                                    type="back"
                                    value="Back"
                                    onClick={handleClose}
                                    className="btn btn-block btn-c secondary-button-no-margin-hover"
                                > Cancel </Link>
                            </div>
                            <div className="col-md-6">
                                <Button type="submit" variant="info" className="btn btn-primary btn-block btn-c primary-button-no-margin-hover qualification-save-change" >
                                    Upload New Qualification
                                </Button>

                            </div>
                        </div>
                    </form>
                    </div>
                </Modal.Body>
            </Modal>
        )
    }

    const pdForm = () => {
        return(
            <Modal show={true} className="model-for-pdform">
                <Modal.Header>
                    <Modal.Title>Professional Development</Modal.Title>
                    <div onClick={handleClose} className='dot'></div>
                </Modal.Header>
                <Modal.Body>
                <div className="model-main-content">
                        
                        <form onSubmit={handleSave}>
                            <div className="row">
                                <div className="col-6">
                                    
                                    <label htmlFor="major">Name:</label>
                                    <input 
                                        type="text" 
                                        className="form-control" 
                                    />
    
                                    <label htmlFor="institution">Place:</label>
                                    <input 
                                        type="text" 
                                        className="form-control" 
                                    />
                                      
                                </div>
                                <div className="col-6">
                                    <label htmlFor="start_date">Starting Date</label>
                                    <DatePicker
                                        className="form-control"
                                        // name="start_date" 
                                        // id="start_date"
                                        // maxDate={startDate}
                                        // selected={startDate}
                                        // onChange={date => setStartDate(date)}
                                        showYearDropdown
                                        dateFormatCalendar="MMMM"
                                        yearDropdownItemNumber={10}
                                        scrollableYearDropdown
                                    />
    
                                    <label htmlFor="graduation_date">Ending Date</label>
                                    <DatePicker
                                        className="form-control"
                                        // name="graduation_date" 
                                        // id="graduation_date"
                                        // selected={graduationDate}
                                        // onChange={date => setGraduationDate(date)}
                                        showYearDropdown
                                        dateFormatCalendar="MMMM"
                                        yearDropdownItemNumber={10}
                                        scrollableYearDropdown
                                    />
    
                                
    
                                </div>
                            </div>
    
                            <div className="row  qualification-footer">
                                <div className="col-md-6">
                                    <Link
                                        type="back"
                                        value="Back"
                                        onClick={handleClose}
                                        className="btn btn-block btn-c secondary-button-no-margin-hover"
                                    > Cancel </Link>
                                    {/* <Button className="btn btn-block btn-c secondary-button-no-margin-hover" onClick={handleClose}>Cancel</Button> */}
                                </div>
                                <div className="col-md-6">
                                    <Button type="submit" variant="info" className="btn btn-primary btn-block btn-c primary-button-no-margin-hover qualification-save-change" >
                                        Save Changes
                                    </Button>
    
                                </div>
                            </div>
                        </form>
                        </div>
    
                </Modal.Body>

            </Modal>
        )
    }

    const handleGraduationDatePicker = () => {
        document.querySelector("#end_date_block").hidden = !document.querySelector("#end_date_block").hidden
    }

    const peForm = () => {
        return(
            <Modal show={true} className="model-for-pdform">
                <Modal.Header>
                    <Modal.Title>Professional Experiences</Modal.Title>
                    <div onClick={handleClose} className='dot'></div>
                </Modal.Header>
                <Modal.Body>
                    <div className="model-main-content">
                        <form>
                            <div className="row">
                                <div className="col-6">
                                    <label htmlFor="institution">Institution:</label>
                                    <input type="text" className="form-control" name="institution" id="institution" />

                                    <label htmlFor="course">Course Name:</label>
                                    <input type="text" className="form-control" name="course" id="course" />

                                    <label htmlFor="class_level">Class Level:</label>
                                    <input type="text" className="form-control" name="class_level" id="class_level"/>
                                </div>
                                <div className="col-6">
                                <label htmlFor="start_date">Starting Date</label>
                                <DatePicker
                                    className="form-control"
                                    name="start_date" 
                                    id="start_date"
                                    maxDate={startDate}
                                    selected={startDate}
                                    onChange={date => setStartDate(date)}
                                    showYearDropdown
                                    dateFormatCalendar="MMMM"
                                    yearDropdownItemNumber={10}
                                    scrollableYearDropdown
                                />
                                <div className='d-flex form-check'>
                                    <input
                                        type='checkbox'
                                        className='check-filter'
                                        id='current_date'
                                        name='current_date'
                                        defaultChecked={true}
                                        onChange={handleGraduationDatePicker}
                                    />
                                    <label htmlFor="current_date"> Currently working in this role </label>
                                </div>
                                <div id="end_date_block">
                                    <label htmlFor="end_date" id="end_date_label">End Date</label>
                                    <DatePicker
                                        className="form-control"
                                        name="end_date" 
                                        id="end_date"
                                        selected={graduationDate}
                                        onChange={date => setGraduationDate(date)}
                                        showYearDropdown
                                        dateFormatCalendar="MMMM"
                                        yearDropdownItemNumber={10}
                                        scrollableYearDropdown
                                    />
                                </div>
                            </div>
                        </div>
                        

                        <div className="row mt-5">
                            <div className="col-md-6">
                                <Link
                                    type="back"
                                    value="Back"
                                    onClick={handleClose}
                                    className="btn btn-block btn-c secondary-button-no-margin-hover"
                                > Cancel </Link>
                                {/* <Button className="btn btn-block btn-c secondary-button-no-margin-hover" onClick={handleClose}>Cancel</Button> */}
                            </div>
                            <div className="col-md-6">
                                <Button 
                                    type="submit" 
                                    className="btn btn-primary btn-block btn-c primary-button-no-margin-hover qualification-save-change"  
                                    onClick={handleSavePE}>
                                    Save Changes
                                </Button>

                            </div>
                        </div>
                            
                        </form>
                    </div>


                </Modal.Body>

            </Modal>
        )
    }

    useEffect(() => {
        // Change the date picker style
        const date_picker = document.querySelectorAll(".react-datepicker-wrapper")
        if(date_picker.length !== 0){
            for(let i = 0; i < date_picker.length; i++){
                date_picker[i].style.display = "block"
            }
        }
        if(document.querySelector("#current_date") && document.querySelector("#current_date").checked){
            document.querySelector("#end_date_block").hidden = true
        }
      });
    return (
      <>  
        {props.formType === 'qualification' && qualificationForm()}
        {props.formType === 'PD' && pdForm()}
        {props.formType === 'PE' && peForm()}
      </>
    );
  }
  
export default ModalForm;
